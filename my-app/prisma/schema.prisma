generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id         String    @id @default(uuid())
    name       String
    accountId  String?   @unique
    account    Account?
    email      String    @unique
    password   String
    image      String?
    followings Follow[]  @relation("followings")
    followers  Follow[]  @relation("followers")
    tweets     Tweet[]
    likes      Likes[]   @relation("userlikes")
    sessions   Session[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String @unique
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Follow {
    followerId  String
    followers   User   @relation("followers", fields: [followerId], references: [id])
    followingId String
    followings  User   @relation("followings", fields: [followingId], references: [id])

    @@id([followerId, followingId])
}

model Tweet {
    id        String    @id @default(uuid())
    author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    authorId  String    @unique
    replies   Replies[] @relation("replies")
    likes     Likes[]   @relation("tweetlikes")
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    content   String
}

model Likes {
    tweetId String
    Tweet   Tweet  @relation("tweetlikes", fields: [tweetId], references: [id])
    userId  String
    User    User   @relation("userlikes", fields: [userId], references: [id])

    @@id([tweetId, userId])
}

model Replies {
    id      Int    @id @default(autoincrement())
    tweetId String
    replies Tweet  @relation("replies", fields: [tweetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
